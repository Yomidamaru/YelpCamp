var npm = require('npm')
  , colors = require('colors')
  , pack = require(process.cwd() + '/package.json')
  , modules = {}
  , total = 0
  , operation = 'install'
  , packageStats = {}
  ;

exports.run = function(args, cb){
  operation = args[0];
  var packages = args.splice(1);
  if(pack.dependencies) build(pack.dependencies, packages);
  if(pack.optionalDependencies) build(pack.optionalDependencies, packages);
  if(pack.devDependencies) build(pack.devDependencies, packages);
  npm.load({}, function (err) {
    if(err) throw err;
    console.log('')
    console.log('')
    console.log('##########################################'.magenta.bold)
    console.log('')
    console.log(('PREPARING TO ' + operation.toUpperCase()+ ' '+ total + ' PACKAGES').magenta.bold)
    console.log('')
    console.log('##########################################'.magenta.bold)
    var start = new Date().getTime();
    var retries = 0;
    install(function(err, data){
      if(err) throw err;
      printStats();
      console.log('######################################'.magenta.bold)
      console.log('')
      console.log(('          PACKAGES ' + operation.toUpperCase() +'ED').magenta.bold)
      console.log('')
      console.log('######################################'.magenta.bold)
      console.log('')
      for(var i in modules) {
        var module = modules[i];
        retries += module.retries;
        var output = ' --' + module.name;
        if(module.name.length < 5) output += '\t';
        console.log(output + '\t\t in ' + module.installSeconds + 's' + ' and ' + (module.retries - 1) + ' retries');
      }
      console.log('')
      console.log('total packages:  '.green + total + '');
      console.log('total seconds:   '.green + (new Date().getTime() - start)/1000);
      console.log('total retries:   '.green + (retries - total));
      console.log('mpn_install_completed'.green);
      console.log('')
      if(cb) cb();
    })
    npm.on("log", console.log)
  });
}

function build(dependancies, packages) {
  for (var i in dependancies) {
    if(packages && packages.length != 0 && packages.indexOf(i) == -1) continue;
    total++;
    modules[i] = {name: i, success: false, retries: 0, index: total};
  }
}

function install(cb) {
  for(var i in modules) {
    var module = modules[i];
    if(module.success) continue;
    if(module.retries == 4)
      return cb(new Error('failed to ' + operation + ' ' + module.name));
    console.log('')
    console.log('----------------------------------------------------------------'.bold.yellow)
    console.log(('starting ' + operation + ' for: ' + module.name + '  -- package ' + module.index + ' of ' + total + ' -- ' + module.retries + ' retries').bold.yellow);
    console.log('----------------------------------------------------------------'.bold.yellow)
    console.log('')
    var start = new Date().getTime();
    npm.commands[operation]([module.name], function (err, data) {
      module.retries++;
      module.success = !err;
      module.installSeconds = (new Date().getTime() - start)/1000;
      if(!err && data) {
        data.forEach(function(success){
          var name = success[0].split('@')[0]
            , version = success[0].split('@')[1]
            , stats
            , version;
          if(packageStats[name]) {
            stats = packageStats[name];
          } else {
            packageStats[name] = stats = {
              name: name,
              versions: {}
            }
          }
          if(stats.versions[version]){
            version = stats.versions[version]
          } else {
            stats.versions[version] = version = {
              version: version,
              packages: []
            }
          }
          if(success[2] != '')
            version.packages.push(success[2] + ' - ' + success[3]);
          else
            version.packages.push('root')
        });
      }
      console.log(operation + ' time: ' + module.installSeconds + 's');
      install(cb);
      // command succeeded, and data might have some info
    });
    return;
  }
  cb();
}

function printStats() {
  if(operation == 'update') return;
  console.log('######################################'.red.bold)
  console.log('')
  console.log('         DUPLICATE PACKAGES'.red.bold)
  console.log('')
  console.log('######################################'.red.bold)
  var count = 0;
  for(var i in packageStats) {
    var stats = packageStats[i]
    if(Object.keys(stats.versions).length == 1) continue;
    count++;
    console.log(stats.name.red);
    for(var j in stats.versions) {
      var version = stats.versions[j]
      console.log('  ' + version.version);
      // console.log(version)
      version.packages.forEach(function(p){
        console.log('    ' + p);
      })
    }
  }
  if(count == 0) console.log('none!'.green)
  console.log('')
}